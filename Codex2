-- Core Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Player Setup
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local root = character:WaitForChild("HumanoidRootPart")
local camera = Workspace.CurrentCamera

-- Configuration Variables
local FLY_DURATION = 2.5
local FLY_SPEED = 50
local REACH_DISTANCE = 18
local ANTI_FALL_HEIGHT = 10
local WALL_CLIMB_SPEED = 0.5
local ANTI_VOID_DISTANCE = 50
local SAFE_GROUND_HEIGHT = 10

-- Movement States
local flying = false
local lastSafePosition = root.Position

-- Fly Function (Press C to toggle flying)
local function updateFly()
    if flying then
        local moveDir = Vector3.new(0, 0, 0)
        if UserInputService:IsKeyDown(Enum.KeyCode.W) then moveDir = moveDir + camera.CFrame.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then moveDir = moveDir - camera.CFrame.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then moveDir = moveDir + camera.CFrame.RightVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then moveDir = moveDir - camera.CFrame.RightVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.Q) then moveDir = moveDir + Vector3.new(0, 1, 0) end
        if UserInputService:IsKeyDown(Enum.KeyCode.R) then moveDir = moveDir - Vector3.new(0, 1, 0) end
        humanoid.PlatformStand = true
        root.Velocity = moveDir.Unit * FLY_SPEED
    else
        humanoid.PlatformStand = false
    end
end

-- Anti-Void (teleports back if void detected)
local function antiVoid()
    local ray = Ray.new(root.Position, Vector3.new(0, -ANTI_VOID_DISTANCE, 0))  -- Cast a ray downward
    local hit = Workspace:Raycast(ray.Origin, ray.Direction)  -- Check if the ray hits anything
    
    if not hit then  -- If nothing is hit (we're in the void)
        -- Teleport back to the last known safe position
        root.CFrame = CFrame.new(lastSafePosition)
    else
        -- Update the last safe position when we are grounded
        lastSafePosition = root.Position
    end
end

-- Wall Climb (climb walls when pressing forward)
local function wallClimb()
    if UserInputService:IsKeyDown(Enum.KeyCode.W) then
        local raycastDirection = camera.CFrame.LookVector
        local raycastResult = Workspace:Raycast(root.Position, raycastDirection * 5)
        if raycastResult then
            root.Velocity = Vector3.new(0, WALL_CLIMB_SPEED, 0)
        end
    end
end

-- Anti Fall (prevents falling below a certain height)
local function antiFall()
    if root.Position.Y < ANTI_FALL_HEIGHT then
        local safePosition = Vector3.new(root.Position.X, ANTI_FALL_HEIGHT, root.Position.Z)
        root.CFrame = CFrame.new(safePosition)
    end
end

-- Extend Reach for Attacking
local function extendReach()
    local tool = character:FindFirstChildWhichIsA("Tool")
    if tool then
        local raycastDirection = camera.CFrame.LookVector * REACH_DISTANCE
        local raycastResult = Workspace:Raycast(root.Position, raycastDirection)
        if raycastResult and raycastResult.Instance.Parent and raycastResult.Instance.Parent:FindFirstChild("Humanoid") then
            tool:Activate()
        end
    end
end

-- Main Loop: Runs every frame
RunService.Heartbeat:Connect(function()
    -- Movement Features
    updateFly()
    antiVoid()
    wallClimb()
    antiFall()
    extendReach()
end)

-- Keybinding for Fly Activation
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.C then
        flying = not flying
        if flying then
            task.delay(FLY_DURATION, function()
                flying = false
            end)
        end
    end
end)
