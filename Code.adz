local function getService(name)
    local success, service = pcall(function() return game:GetService(name) end)
    if success then
        return service
    else
        warn(name .. " is not available.")
        return nil
    end
end

local Players = getService("Players")
local Workspace = getService("Workspace")
local ReplicatedStorage = getService("ReplicatedStorage")
local UserInputService = getService("UserInputService")
local RunService = getService("RunService")
local Camera = Workspace.CurrentCamera

local player = Players.LocalPlayer
local character, humanoid, root
local config, states

local function initializeConfig()
    config = {
        FLY_SPEED = 55,
        REACH_DISTANCE = 50,
        ANTI_FALL_HEIGHT = 4,
        WALL_CLIMB_FORCE = 65,
        ANTI_VOID_CHECK_DISTANCE = 500,
        SAFE_GROUND_THRESHOLD = 4,
        ANTI_HIT_TP_HEIGHT = 1000,
        NUKE_RADIUS = 18,
        SWORD_TIERS = {"wood_sword", "stone_sword", "iron_sword", "diamond_sword", "emerald_sword"},
        PICKAXE_TIERS = {"wood_pickaxe", "stone_pickaxe", "iron_pickaxe", "diamond_pickaxe"},
        AXE_TIERS = {"wood_axe", "stone_axe", "iron_axe", "diamond_axe"},
        ARMOR_TIERS = {"leather_armor", "iron_armor", "diamond_armor", "emerald_armor"},
        CIRCLE_COLOR = Color3.fromRGB(0, 170, 255),
        JUMP_VELOCITY = 50,
        ANTI_FALL_VELOCITY = 0,
        TOXIC_RESPONSES = {
            bedDestroyed = "LOL Good Luck Fixing Your Bed|ADZX2"
        },
        AUTO_SPRINT_SPEED = 16,
        FOV = 120
    }
    states = {
        flying = false,
        antiHitActive = false,
        lastSafePosition = root.Position,
        nukerActive = false,
        antiKnockback = true,
        wallClimbing = false,
        antiVoidEnabled = true,
        jumping = false,
        infJumpEnabled = false,
        autoSprint = true,
        antiDeath = false
    }
end

local function createESP(character)
    local head = character:FindFirstChild("Head")
    if not head then return end
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "ESP"
    billboardGui.Adornee = head
    billboardGui.Size = UDim2.new(4, 0, 2, 0)
    billboardGui.StudsOffset = Vector3.new(0, 2, 0)
    billboardGui.AlwaysOnTop = true
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Parent = billboardGui
    nameLabel.BackgroundTransparency = 1
    nameLabel.Text = character.Parent.Name
    nameLabel.TextColor3 = Color3.fromRGB(0, 170, 255)
    nameLabel.TextStrokeTransparency = 0
    nameLabel.Size = UDim2.new(1, 0, 1, 0)
    nameLabel.Font = Enum.Font.SourceSansBold
    nameLabel.TextScaled = true
    local healthLabel = Instance.new("TextLabel")
    healthLabel.Parent = billboardGui
    healthLabel.BackgroundTransparency = 1
    healthLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
    healthLabel.TextStrokeTransparency = 0
    healthLabel.Size = UDim2.new(1, 0, 1, 0)
    healthLabel.Position = UDim2.new(0, 0, 1, 0)
    healthLabel.Font = Enum.Font.SourceSansBold
    healthLabel.TextScaled = true
    local equippedLabel = Instance.new("TextLabel")
    equippedLabel.Parent = billboardGui
    equippedLabel.BackgroundTransparency = 1
    equippedLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
    equippedLabel.TextStrokeTransparency = 0
    equippedLabel.Size = UDim2.new(1, 0, 1, 0)
    equippedLabel.Position = UDim2.new(0, 0, 2, 0)
    equippedLabel.Font = Enum.Font.SourceSansBold
    equippedLabel.TextScaled = true
    local distanceLabel = Instance.new("TextLabel")
    distanceLabel.Parent = billboardGui
    distanceLabel.BackgroundTransparency = 1
    distanceLabel.TextColor3 = Color3.fromRGB(255, 255, 0)
    distanceLabel.TextStrokeTransparency = 0
    distanceLabel.Size = UDim2.new(1, 0, 1, 0)
    distanceLabel.Position = UDim2.new(0, 0, 3, 0)
    distanceLabel.Font = Enum.Font.SourceSansBold
    distanceLabel.TextScaled = true
    RunService.RenderStepped:Connect(function()
        local hum = character:FindFirstChildOfClass("Humanoid")
        if hum then
            healthLabel.Text = "Health: " .. math.floor(hum.Health)
        end
        local tool = character:FindFirstChildWhichIsA("Tool")
        equippedLabel.Text = tool and tool.Name or "No Tool"
        if character:FindFirstChild("HumanoidRootPart") and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).magnitude
            distanceLabel.Text = "Distance: " .. math.floor(distance)
        end
    end)
    billboardGui.Parent = head
end

local function initializeESP()
    for _, enemy in ipairs(Players:GetPlayers()) do
        if enemy ~= player and enemy.Team ~= player.Team then
            enemy.CharacterAdded:Connect(function(character)
                createESP(character)
            end)
            if enemy.Character then
                createESP(enemy.Character)
            end
        end
    end
    Players.PlayerAdded:Connect(function(newPlayer)
        if newPlayer.Team ~= player.Team then
            newPlayer.CharacterAdded:Connect(function(character)
                createESP(character)
            end)
        end
    end)
end

local function safePositionCheck()
    local offset = Vector3.new(0, config.ANTI_HIT_TP_HEIGHT, 0)
    local potentialPosition = root.Position + offset
    local rp = RaycastParams.new()
    rp.FilterDescendantsInstances = {character}
    local result = Workspace:Raycast(potentialPosition, Vector3.new(0, -config.ANTI_HIT_TP_HEIGHT, 0), rp)
    if result and result.Instance.CanCollide then
        return potentialPosition
    else
        return root.Position + Vector3.new(0, config.ANTI_HIT_TP_HEIGHT * 2, 0)
    end
end

local function antiHit()
    RunService.RenderStepped:Connect(function()
        for _, target in ipairs(Players:GetPlayers()) do
            if target ~= player and target.Team ~= player.Team then
                local tRoot = target.Character and target.Character:FindFirstChild("HumanoidRootPart")
                if tRoot and (root.Position - tRoot.Position).Magnitude < config.NUKE_RADIUS then
                    local safePosition = safePositionCheck()
                    local originalCameraCFrame = Camera.CFrame
                    root.CFrame = CFrame.new(safePosition)
                    task.wait(0.1)
                    root.CFrame = CFrame.new(root.Position + Vector3.new(0, config.ANTI_HIT_TP_HEIGHT, 0))
                    Camera.CFrame = originalCameraCFrame
                    break
                end
            end
        end
    end)
end

local function antiVoid()
    RunService.RenderStepped:Connect(function()
        if states.antiVoidEnabled and not states.jumping then
            local rp = RaycastParams.new()
            rp.FilterDescendantsInstances = {character}
            local result = Workspace:Raycast(root.Position, Vector3.new(0, -config.ANTI_VOID_CHECK_DISTANCE, 0), rp)
            if not result then
                root.CFrame = CFrame.new(states.lastSafePosition)
            else
                states.lastSafePosition = root.Position
            end
        end
    end)
    UserInputService.JumpRequest:Connect(function()
        states.jumping = true
        states.antiVoidEnabled = false
        task.wait(1)
        states.jumping = false
        states.antiVoidEnabled = true
    end)
end

local function wallClimb()
    RunService.RenderStepped:Connect(function()
        local rp = RaycastParams.new()
        rp.FilterDescendantsInstances = {character}
        local result = Workspace:Raycast(root.Position, root.CFrame.LookVector * config.REACH_DISTANCE, rp)
        if result and result.Instance.CanCollide then
            root.Velocity = Vector3.new(root.Velocity.X, config.WALL_CLIMB_FORCE, root.Velocity.Z)
            states.wallClimbing = true
            task.wait(0.05)
            root.Velocity = Vector3.new(root.Velocity.X, 0, root.Velocity.Z)
        else
            states.wallClimbing = false
        end
    end)
end

local function antiKnockback()
    RunService.RenderStepped:Connect(function()
        if states.antiKnockback then
            local velocity = root.Velocity
            velocity = velocity * 0.1
            root.Velocity = velocity
        end
    end)
end

local function getBestTool(toolType)
    local bestTool = nil
    local highestTier = 0
    local toolTiers = (toolType == "pickaxe") and config.PICKAXE_TIERS or config.AXE_TIERS
    for i, toolName in ipairs(toolTiers) do
        local tool = player.Backpack:FindFirstChild(toolName)
        if tool and i > highestTier then
            highestTier = i
            bestTool = tool
        end
    end
    return bestTool
end

local function nuker()
    RunService.RenderStepped:Connect(function()
        if not states.nukerActive then
            states.nukerActive = true
            for _, target in ipairs(Workspace:GetPartsInPart(root, config.NUKE_RADIUS)) do
                local par = target.Parent
                if par and par.Name == "bed" then
                    local bestPickaxe = getBestTool("pickaxe")
                    if bestPickaxe then
                        humanoid:EquipTool(bestPickaxe)
                        for _ = 1, 25 do
                            bestPickaxe:Activate()
                            task.wait(0.1)
                        end
                    end
                    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(config.TOXIC_RESPONSES.bedDestroyed, "All")
                end
            end
            states.nukerActive = false
        end
    end)
end

local function killAura()
    RunService.RenderStepped:Connect(function()
        local tool = character:FindFirstChildWhichIsA("Tool")
        if tool and table.find(config.SWORD_TIERS, tool.Name) then
            for _, target in ipairs(Players:GetPlayers()) do
                if target ~= player and target.Team ~= player.Team then
                    local tRoot = target.Character and target.Character:FindFirstChild("HumanoidRootPart")
                    if tRoot and (root.Position - tRoot.Position).Magnitude <= config.REACH_DISTANCE then
                        tool:Activate()
                    end
                end
            end
        end
    end)
end

local function antiFall()
    RunService.RenderStepped:Connect(function()
        if humanoid.FloorMaterial == Enum.Material.Air and root.Velocity.Y < 0 then
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
            root.Velocity = Vector3.new(root.Velocity.X, config.ANTI_FALL_VELOCITY, root.Velocity.Z)
        else
            humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)
        end
    end)
end

local function infiniteJump()
    UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.Space or input.UserInputType == Enum.UserInputType.Touch then
            states.infJumpEnabled = true
        end
    end)
    UserInputService.InputEnded:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.Space or input.UserInputType == Enum.UserInputType.Touch then
            states.infJumpEnabled = false
        end
    end)
    RunService.RenderStepped:Connect(function()
        if states.infJumpEnabled then
            root.Velocity = Vector3.new(root.Velocity.X, config.JUMP_VELOCITY, root.Velocity.Z)
        end
    end)
end

local function autoSprint()
    RunService.RenderStepped:Connect(function()
        if states.autoSprint then
            humanoid.WalkSpeed = config.AUTO_SPRINT_SPEED
        end
    end)
end

local function antiSuffocation()
    RunService.RenderStepped:Connect(function()
        if root.Position.Y < config.SAFE_GROUND_THRESHOLD and root.Velocity.Y == 0 then
            root.CFrame = root.CFrame + Vector3.new(0, config.ANTI_FALL_HEIGHT, 0)
        end
    end)
end

local function antiDeath()
    RunService.RenderStepped:Connect(function()
        if humanoid.Health <= 35 and not states.antiDeath then
            states.antiDeath = true
            states.lastSafePosition = root.Position
            root.CFrame = CFrame.new(root.Position.X, 50000, root.Position.Z)
            Camera.CFrame = CFrame.new(root.Position)
        elseif humanoid.Health > 35 and states.antiDeath then
            states.antiDeath = false
            root.CFrame = CFrame.new(states.lastSafePosition)
        end
    end)
end

local function setFOV()
    Camera.FieldOfView = config.FOV
end

local function onPlayerRespawn()
    player.CharacterAdded:Connect(function(newCharacter)
        character = newCharacter
        humanoid = character:WaitForChild("Humanoid",10) or error("Humanoid not found")
        root = character:WaitForChild("HumanoidRootPart",10) or error("HumanoidRootPart not found")
        initializeESP()
        antiHit()
        antiVoid()
        wallClimb()
        antiKnockback()
        nuker()
        killAura()
        antiFall()
        infiniteJump()
        autoSprint()
        antiSuffocation()
        antiDeath()
        setFOV()
    end)
end

onPlayerRespawn()

initializeConfig()
initializeESP()
antiHit()
antiVoid()
wallClimb()
antiKnockback()
nuker()
killAura()
antiFall()
infiniteJump()
autoSprint()
antiSuffocation()
antiDeath()
setFOV()

player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid",10) or error("Humanoid not found")
    root = character:WaitForChild("HumanoidRootPart",10) or error("HumanoidRootPart not found")
    initializeESP()
    antiHit()
    antiVoid()
    wallClimb()
    antiKnockback()
    nuker()
    killAura()
    antiFall()
    infiniteJump()
    autoSprint()
    antiSuffocation()
    antiDeath()
    setFOV()
end)
